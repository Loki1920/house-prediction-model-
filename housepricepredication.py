# -*- coding: utf-8 -*-
"""Housepricepredication.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tj2-1rYbZ7SnKIW-_unrphr5zloDi7Go

K-Fold cross-validation
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.metrics import accuracy_score

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier

#Loading data to pandas dataframe
heart_data = pd.read_csv('/content/heart.csv')

heart_data.shape

heart_data.head()

#checking for missing value
heart_data.isnull().sum()

heart_data['target'].value_counts()
# 1-> defected heart
#0->  healthy heart

"""splitting the features and target """

X = heart_data.drop(columns = 'target',axis=1)
Y = heart_data['target']

print(X)

print(Y)

"""Train Test Split """

X_train , X_test ,Y_train ,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=3)

print(X.shape, X_train.shape, X_test.shape)

# list of models
models = [LogisticRegression(max_iter=1000),SVC(kernel = 'linear'),KNeighborsClassifier(),RandomForestClassifier]

def compare_models_train_test():
  for model in models:
    #training the model
    model.fit(X_train,Y_train)
    #evaluating model
    test_data_prediction = model.predict(X_test)
    accuracy = accuracy_score(Y_test,test_data_prediction)
    print('Accuracy score of the :',model,'=',accuracy)

#compare_models_train_test()

"""Cross Validation 

Logistic Regression 
"""

cv_score_lr = cross_val_score(LogisticRegression(max_iter=1000),X,Y,cv=5)
print(cv_score_lr)
mean_accuracy_lr = sum(cv_score_lr)/len(cv_score_lr)
mean_accuracy_score_lr = round(mean_accuracy_lr,2)
print(mean_accuracy_lr)

"""Support Vector Classifier"""

cv_score_svc = cross_val_score(SVC(kernel='linear'), X, Y, cv=5)

print(cv_score_svc)

mean_accuracy_svc = sum(cv_score_svc)/len(cv_score_svc)

mean_accuracy_svc = mean_accuracy_svc*100

mean_accuracy_svc = round(mean_accuracy_svc, 2)

print(mean_accuracy_svc)

"""Creating a Function to compare the models"""

# list of models
models = [LogisticRegression(max_iter=1000), SVC(kernel='linear'), KNeighborsClassifier(), RandomForestClassifier()]

def compare_models_cross_validation():

  for model in models:

    cv_score = cross_val_score(model, X,Y, cv=5)
    
    mean_accuracy = sum(cv_score)/len(cv_score)

    mean_accuracy = mean_accuracy*100

    mean_accuracy = round(mean_accuracy, 2)

    print('Cross Validation accuracies for ', model, '=  ', cv_score)
    print('Accuracy % of the ', model, mean_accuracy)
    print('----------------------------------------------')

compare_models_cross_validation()